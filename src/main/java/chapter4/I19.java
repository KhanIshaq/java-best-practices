/**
 * 
 */
package chapter4;

/**
 * @author nsa
 *
 *Item19: Design and document for inheritance or elseprohibitit
 *
 *the class must document its self-use of overridable methods.
 *
 *By overridable, we mean nonfinal and either public or protected.
 *
 *“Implementation Requirements,” which is generated by the Javadoc tag @implSpec
 *
 *-tag "apiNote:a:API Note:".
 *
 *To allow programmers to write efficient subclasses without undue pain, a class may have to provide hooks into its internal workings in the form of judiciously chosen protected methods or, in rare instances, protected fields.
 * For example, consider the removeRange method from java.util.AbstractList:
 * protected void removeRange(int fromIndex, int toIndex)
 * 
 * Constructors must not invoke overridable methods, directly or indirectly.
 * 
 * If you do decide to implement either Cloneable or Serializable in a class that is designed for inheritance, you should be aware that because the clone and readObject methods behave a lot like constructors, a similar restriction applies: neither clone nor readObject may invoke an overridable method, directly or indirectly.
 * 
 * In order to implement Serializable in a class designed for inheritance and the class has a readResolve or writeReplace method
 * make the readResolve or writeReplace method protected rather than private
 * There are some situations where it is clearly the right thing to do, such as abstract classes, including skeletal implementations of interfaces (Item 20). 
 * There are other situations where it is clearly the wrong thing to do, such as immutable classes (Item 17).
 * 
 * 
 * The best solution to this problem is to prohibit subclassing in classes that are not designed and documented to be safely subclassed. 
 * There are two ways to prohibit subclassing. 
 * The easier of the two is to declare the class final. 
 * The alternative is to make all the constructors private or package-private and to add public static factories in place of the constructors.
 * 
 */
public class I19 {

}
